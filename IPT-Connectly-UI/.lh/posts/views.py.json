{
    "sourceFile": "posts/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1737298295427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1737298295427,
            "name": "Commit-0",
            "content": "# Create your views here.\r\n#Retrieve All Users (GET):\r\n\"\"\"\r\nfrom django.http import JsonResponse\r\nfrom .models import User\r\n\r\n\r\ndef get_users(request):\r\n    try:\r\n        users = list(User.objects.values('id', 'username', 'email', 'created_at'))\r\n        return JsonResponse(users, safe=False)\r\n    except Exception as e:\r\n        return JsonResponse({'error': str(e)}, status=500)\r\n\r\n\r\n#Create a User (POST):\r\n\r\nimport json\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom .models import User\r\n\r\n\r\n@csrf_exempt\r\ndef create_user(request):\r\n    if request.method == 'POST':\r\n        try:\r\n            data = json.loads(request.body)\r\n            user = User.objects.create(username=data['username'], email=data['email'])\r\n            return JsonResponse({'id': user.id, 'message': 'User created successfully'}, status=201)\r\n        except Exception as e:\r\n            return JsonResponse({'error': str(e)}, status=400)\r\n\r\n#Retrieve All Posts (GET):\r\nfrom .models import Post\r\n\r\n\r\ndef get_posts(request):\r\n    try:\r\n        posts = list(Post.objects.values('id', 'content', 'author', 'created_at'))\r\n        return JsonResponse(posts, safe=False)\r\n    except Exception as e:\r\n        return JsonResponse({'error': str(e)}, status=500)\r\n\r\n#Create a Post (POST):\r\n@csrf_exempt\r\ndef create_post(request):\r\n    import pdb; pdb.set_trace()  # Add this breakpoint\r\n    if request.method == 'POST':\r\n        try:\r\n            data = json.loads(request.body)\r\n            author = User.objects.get(id=data['author'])\r\n            post = Post.objects.create(content=data['content'], author=author)\r\n            return JsonResponse({'id': post.id, 'message': 'Post created successfully'}, status=201)\r\n        except User.DoesNotExist:\r\n            return JsonResponse({'error': 'Author not found'}, status=404)\r\n        except Exception as e:\r\n            return JsonResponse({'error': str(e)}, status=400)\r\n\"\"\"\r\n\r\n#ADDED 1 19 2025\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.response import Response\r\nfrom rest_framework import status\r\nfrom .models import User, Post, Comment\r\nfrom .serializers import UserSerializer, PostSerializer, CommentSerializer\r\n\r\n\r\nclass UserListCreate(APIView):\r\n    def get(self, request):\r\n        users = User.objects.all()\r\n        serializer = UserSerializer(users, many=True)\r\n        return Response(serializer.data)\r\n\r\n\r\n    def post(self, request):\r\n        serializer = UserSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass PostListCreate(APIView):\r\n    def get(self, request):\r\n        posts = Post.objects.all()\r\n        serializer = PostSerializer(posts, many=True)\r\n        return Response(serializer.data)\r\n\r\n\r\n    def post(self, request):\r\n        serializer = PostSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass CommentListCreate(APIView):\r\n    def get(self, request):\r\n        comments = Comment.objects.all()\r\n        serializer = CommentSerializer(comments, many=True)\r\n        return Response(serializer.data)\r\n\r\n    def post(self, request):\r\n        serializer = CommentSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n"
        }
    ]
}